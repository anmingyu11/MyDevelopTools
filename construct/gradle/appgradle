apply plugin: 'AndResGuard'
apply plugin: 'com.android.application'
apply plugin: 'com.antfortune.freeline'

/**
 * andResGuard standard params
 */
andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    use7zip = true
    useSign = true
    // it will keep the origin path of your resources when it's true
    keepRoot = false
    whiteList = [
            // your icon
            "R.drawable.icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for umeng update
            "R.string.umeng*",
            "R.string.UM*",
            "R.string.tb_*",
            "R.layout.umeng*",
            "R.layout.tb_*",
            "R.drawable.umeng*",
            "R.drawable.tb_*",
            "R.anim.umeng*",
            "R.color.umeng*",
            "R.color.tb_*",
            "R.style.*UM*",
            "R.style.umeng*",
            "R.id.umeng*",
            // umeng share for sina
            "R.drawable.sina*",
            // for google-services.json
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
            "resources.arsc"
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.1.16'
        //path = "/usr/local/bin/7za" 如果你想指定7zip压缩，这里填写你的7za的执行路径(请在linux环境下编译，压缩效果较好)。
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    lintOptions {
        abortOnError false
        disable 'MissingTranslation', 'ExtraTranslation'
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId ""
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode rootProject.ext.appVersionCode
        versionName rootProject.ext.appVersionName

        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()
        resValue("bool", "isCompiledByFreeLine", rootProject.ext.isCompiledByFreeLine ? "true" : "false")

    }

    dexOptions {
        javaMaxHeapSize '4g' //用来解决android gradle 运行dx命令时，内存不够用的情况.
    }

    signingConfigs {

        //Todo: 这样设置alias和密码是非常危险的，应该设置到系统环境变量中,或从文件中读取.
        //Todo: To set alias and password in this way is dangerous, should set those in system environment.
        debug {
            storeFile file(keyStoreFile())
        }

        release {
            storeFile file(keyStoreFile())
        }

    }

    buildTypes {

        release {
            signingConfig signingConfigs.release
            debuggable false
            jniDebuggable false

            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-android.pro'

            resValue("bool", "enable_log", "true")//设置这个值是否开启enable_log
        }

        debug {
            signingConfig signingConfigs.debug
            debuggable true
            jniDebuggable true

            resValue("bool", "enable_log", "true")//设置这个值是否开启enable_log
            resValue("string", "log_tag", "AMY")//log tag (except LogUtil.eg or some other in future)
        }

    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputName = "-------" + "-";

            if ('release'.equals(variant.buildType.name)) {
                outputName += variant.versionName + "-"
                outputName += variant.flavorName
                outputName += ".apk"
            } else if ('debug'.equals(variant.buildType.name)) {
                //版本名 versionName
                outputName += variant.versionName + "-"
                //渠道名 flavourName
                outputName += variant.flavorName + "-"
                //被谁编译 buildBy
                outputName += "by-" + hostName() + "-"
                //在什么时候 at buildTime
                outputName += "at-" + buildTime()
                outputName += ".apk"
            }

            output.outputFile = new File(output.outputFile.parentFile, outputName);

        }
    }

    productFlavors {
        Zeus {
            /*This flavour is for our develop 这个渠道仅仅是开发用的*/
        }
    }

    sourceSets.main {
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['src']
        resources.srcDirs = ['src']
        jniLibs.srcDirs = ['jni/libs'] // Where our .so files are placed.
        aidl.srcDirs = ['src']
        renderscript.srcDirs = ['src']
        res.srcDirs = ['res']
        assets.srcDirs = ['assets']
    }
    sourceSets.test {
        java.srcDirs = ['test']
    }

    if (rootProject.ext.isCompiledByFreeLine) {
        freeline {
            hack true
            productFlavor "Zeus"
        }
    }
}

dependencies {

    //module
    compile project(':lib-MultilThreadDownloader')

    //Android library
    compile 'com.android.support:appcompat-v7:24.2.0'
    compile 'com.android.support:cardview-v7:24.2.0'
    compile 'com.android.support:recyclerview-v7:24.2.0'
    compile 'com.android.support:design:24.2.0'
    compile 'com.android.support:support-annotations:24.2.0'

    //External library
    compile 'com.daimajia.easing:library:1.0.1@aar'//animations support
    compile 'com.daimajia.androidanimations:library:1.1.3@aar'//animations
    compile 'com.jaeger.statusbaruitl:library:1.2.8'// Status Bar Util Tool.
    compile 'com.google.code.gson:gson:2.2.4'//Gson
    compile 'com.squareup.picasso:picasso:2.5.2'//Picasso picture loading library
    compile 'com.lcodecorex:tkrefreshlayout:1.0.3'//Refresh layout

    compile 'com.antfortune.freeline:runtime:0.8.4'//FreeLine increment compiler
}

def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def hostName() {
    return System.getProperty("user.name");
}

/**
 * git version from git tag.
 * @return
 */
def revision() {
    def code = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code
    }
    return code.toString()
}

def keyStoreFile() {
    return "../keyStore/*.jks"
}
